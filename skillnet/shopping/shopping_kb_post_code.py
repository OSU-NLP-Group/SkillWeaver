async def navigate_to_category(page, category_name):
    """
    Navigate to a specified product category on the One Stop Market website.

    Parameters:
    - page : Page generated by Playwright
    - category_name : Name of the category to navigate to (case insensitive).

    This function clicks on the category menu item to take the user to the associated product category page.
    Ensure the category name is spelled correctly; substring matches are allowed.

    Usage log:
    - Successfully navigated to the "Electronics" category using this procedure.
    - Successfully employed to navigate to several product category pages without any issues.
    - Successfully navigated to the "Beauty & Personal Care" category using this procedure.
    - Successfully navigated to the "Grocery & Gourmet Food" category using this procedure.

    """
    await page.goto("/")
    await page.get_by_role("menuitem", name=category_name).click()


async def get_complete_order_history(page):
    """
    Retrieves a complete history of orders from the 'My Orders' page, including details such as:
    - Order number
    - Date of order
    - Recipient name
    - Order total
    - Order status

    Usage preconditions:
    - The function navigates directly to the 'My Orders' history page.
    - This API requires the user to be already logged into their account dashboard.

    Args:
    page : A Playwright `Page` instance that controls browser automation.

    Returns:
    list of dict
        A list of dictionaries where each dictionary contains the following keys:
        - "order_number" (str): The order identifier number.
        - "date" (str): The date when the order was placed.
        - "recipient" (str): The name of the person to whom the order was shipped.
        - "amount" (str): The total amount of the order.
        - "status" (str): The current status of the order.
    """
    try:
        await page.goto("/sales/order/history/")
        await page.wait_for_load_state("networkidle")
        
        all_orders = []
        
        page_number = 1
        while True:
            table = await page.wait_for_selector("#my-orders-table")
            print(f"Found table on page {page_number}")
            table_html = await table.inner_html()
            print(f"Table HTML on page {page_number}:", table_html)

            orders = await page.evaluate("""() => {
                const rows = document.querySelectorAll('#my-orders-table tbody tr');
                return Array.from(rows).map(row => ({
                    order_number: row.querySelector('[data-th="Order #"]').textContent.trim(),
                    date: row.querySelector('[data-th="Date"]').textContent.trim(),
                    total: row.querySelector('[data-th="Order Total"] .price').textContent.trim(),
                    status: row.querySelector('[data-th="Status"]').textContent.trim(),
                    view_url: row.querySelector('.action.view').href
                }));
            }""")
            
            all_orders.extend(orders)
            print(f"Page {page_number} extracted orders: {len(orders)} | orders {orders}")

            next_button = await page.query_selector('li.pages-item-next')
            if not next_button:
                break

            await next_button.click()
            await page.wait_for_load_state("networkidle")
            
            page_number += 1
            print(f"This is page {page_number} of order information.")
            
        await page.goto("/sales/order/history/")

        await page.wait_for_load_state("networkidle")
        return {
            "orders": all_orders,
            "total_orders": len(all_orders)
        }
        
    except Exception as e:
        return {
            "error": str(e),
        }

async def extract_electronics_product_info(page):
    """
    Extract electronics product information from the current page.

    This function automates the extraction of product information from an electronics
    product list on a webpage. It gathers information about each product, including:

    - Product name
    - Product detail URL

    [Usage preconditions]
    - This function should be called when the page is displaying a list of electronics products.
    - Ensure to be on the correct webpage containing product listings before executing this function.

    Args:
    page: A Playwright `Page` instance that controls browser automation.

    Returns:
    list of dict
        A list of dictionaries where each dictionary contains:
        - "name" (str): The name of the product.
        - "url" (str): The URL for the product details.
    """
    await page.goto("/electronics.html")
    products = []
    product_elements = await page.query_selector_all('main a[href$=".html"]')
    for product_element in product_elements:
        name_element = await product_element.text_content()
        name = name_element.strip()
        url = await product_element.get_attribute("href")
        products.append({"name": name, "url": url.strip()})
    return products




async def navigate_to_cart_page(page):
    """
    Navigate to the cart page by clicking the 'My Cart' link.

    This function automates the action of navigating to the cart page by clicking
    on the cart link, which usually indicates the number of items in the cart.
    The link text may vary depending on the number of items, thus it is important
    to select this element based on its role and duty.

    [Usage preconditions]
    - Ensure to be on the homepage before executing this function.

    Args:
    page: A Playwright `Page` instance that controls browser automation.

    Usage log:
    - Successfully navigated to the cart page by clicking the cart link.

    """
    await page.goto("/")
    await page.get_by_role("link", name="My Cart").click()


async def extract_product_details_with_prices(page):
    """
    Retrieve product information from the current webpage, including names, prices, and URLs.

    This function automates the collection of product details from the webpage you are currently on,
    gathering comprehensive information for each product listed on the page.

    [Usage preconditions]
    - You must be on a webpage with listed products, as this API extracts information directly from the current page.

    Args:
    page : A Playwright `Page` instance that controls browser automation.

    Returns:
    list of dict
        A list of dictionaries where each dictionary contains the following keys:
        - "name" (str): The name of the product.
        - "price" (str): The price of the product.
        - "url" (str): The URL of the product.
    """
    await page.goto("/")
    product_elements = await page.query_selector_all(".product-item")
    products = []
    for product in product_elements:
        name_element = await product.query_selector(".product-name")
        price_element = await product.query_selector(".product-price")
        url_element = await product.query_selector("a.product-link")
        name = await name_element.inner_text() if name_element else "N/A"
        price = await price_element.inner_text() if price_element else "N/A"
        url = await url_element.get_attribute("href") if url_element else "N/A"
        products.append({"name": name, "price": price, "url": url})
    return products


async def extract_cart_items_information(page):
    """
    [Function description]
    Retrieve all product names, their quantities, and individual prices from the shopping cart section.

    This function captures the items in the current shopping cart and extracts key information about each.
    It gathers the following details for each item present in the cart:

    - Product name
    - Quantity
    - Individual price

    [Usage preconditions]
    - The API should be executed when you are already on a page where a shopping cart section is available.
    - No navigation to a different page is required; the script automatically processes the available cart section.

    Args:
    page : A Playwright `Page` instance that controls browser automation.

    Returns:
    list of dict
        A list of dictionaries where each dictionary contains:
        - "name" (str): The name of the product.
        - "quantity" (str): The product's quantity.
        - "price" (str): The individual price of the product.
    """
    await page.goto("/")
    cart_items = await page.query_selector_all(".cart-item-class")
    cart_info = []
    for item in cart_items:
        name_elem = await item.query_selector(".product-name-class")
        name = await name_elem.text_content() if name_elem else None
        quantity_elem = await item.query_selector(".product-quantity-class")
        quantity = await quantity_elem.text_content() if quantity_elem else None
        price_elem = await item.query_selector(".product-price-class")
        price = await price_elem.text_content() if price_elem else None
        if name and quantity and price:
            cart_info.append(
                {
                    "name": name.strip(),
                    "quantity": quantity.strip(),
                    "price": price.strip(),
                }
            )
    return cart_info


async def extract_navigation_category_links(page):
    """
    [Function description]
    Compiles all category names and their corresponding URLs represented in the main navigation bar.

    This function automates the extraction of category links from the main navigation bar of a webpage.
    It gathers information about each category, including:
    - Category name
    - Category URL

    [Usage preconditions]
    - This API retrieves category information from the navigation bar.
    - **You must already be on a webpage with a navigation bar containing category links before calling this function.**

    Args:
    page : A Playwright `Page` instance that controls browser automation.

    Returns:
    list of dict
        A list of dictionaries where each dictionary contains the following keys:
        - "category_name" (str): The name of the category.
        - "url" (str): The URL of the category.
    """
    await page.goto("/")
    categories = []
    navigation_links = await page.query_selector_all(".tablist .menuitem")
    for link in navigation_links:
        category_name = await link.inner_text()
        url = await link.get_attribute("href")
        categories.append({"category_name": category_name.strip(), "url": url.strip()})
    return categories


async def extract_product_category_links(page):
    """
    Extracts product category names and their URLs from the navigation bar on the homepage.

    This function automates the process of gathering all product categories available in the main
    navigation section of the One Stop Market's homepage, providing links to each category.

    [Usage preconditions]
    - You must be on the homepage that contains the tablist with category links.

    Args:
    page : A Playwright `Page` instance that controls browser automation.

    Returns:
    list of dict:
        A list of dictionaries where each dictionary contains:
        - "category_name" (str): The name of the category.
        - "url" (str): The URL leading to the category page.

    Usage log:
    - Successfully extracted category URLs including "Beauty & Personal Care", "Electronics".

    """
    await page.goto("/")
    categories = []
    menuitems = [
        "Beauty & Personal Care",
        "Sports & Outdoors",
        "Clothing, Shoes & Jewelry",
        "Home & Kitchen",
        "Office Products",
        "Tools & Home Improvement",
        "Health & Household",
        "Patio, Lawn & Garden",
        "Electronics",
        "Cell Phones & Accessories",
        "Video Games",
        "Grocery & Gourmet Food",
    ]
    for item in menuitems:
        link = page.get_by_role("tablist").get_by_role("menuitem", name=item)
        url = await link.get_attribute("href")
        if url:
            categories.append({"category_name": item, "url": url})
    return categories



async def extract_wish_list_information(page):
    """
    Extracts product names, prices, and URLs from the My Wish List page.

    This function automates the process of accessing the My Wish List page to gather
    information about products that have been added to the wish list.
    It retrieves the product names, prices, and URLs for each item listed.

    [Usage preconditions]
    - This function assumes that the user is currently on the 'My Wish List' page.

    Args:
    page : A Playwright `Page` instance that controls browser automation.

    Returns:
    list of dict
        A list of dictionaries where each dictionary contains:
        - "name" (str): The product name.
        - "price" (str): The price of the product.
        - "url" (str): The URL of the product.
    """
    await page.goto("/customer/account/")
    links = await page.query_selector_all('main a:not([href=""])')
    wish_list_items = []
    for link in links:
        name = await (await link.get_property("textContent")).json_value()
        price_element = await link.query_selector(".price")
        price = (
            await (await price_element.get_property("textContent")).json_value()
            if price_element
            else "N/A"
        )
        url = await (await link.get_property("href")).json_value()
        wish_list_items.append(
            {"name": name.strip(), "price": price.strip(), "url": url.strip()}
        )
    return wish_list_items



async def navigate_to_my_account_page(page):
    """
    Navigate to the 'My Account' page from the homepage.

    This function will locate the 'My Account' link available on the homepage and click it to access the user's account page.

    Usage log:
    - Successfully used to navigate to the 'My Account' page in a test scenario.

    Args:
    page : A Playwright `Page` instance that controls browser automation.
    """
    await page.goto("/")
    await page.get_by_role("link", name="My Account").click()



async def retrieve_compare_products_details(page):
    """
    [Function description]
    Extracts detailed information about products listed under "Compare Products".

    This function navigates through the page to find products currently being compared
    and gathers comprehensive information, including:

    - Product name
    - Product description
    - Product URL

    [Usage preconditions]
    - You must already be on the page listing products for comparison.

    Args:
    page :  A Playwright `Page` instance that controls browser automation.

    Returns:
    list of dict
        A list of dictionaries where each dictionary contains:
        - "name" (str): The name of the product.
        - "description" (str): The description of the product (if available).
        - "url" (str): The URL of the product.
    """
    await page.goto("/customer/account/")
    products = []
    compare_product_links = await page.query_selector_all('main a[href*="compare"]')
    for product_link in compare_product_links:
        name_element = await product_link.query_selector("span")
        name = await name_element.inner_text() if name_element else ""
        description_element = await product_link.query_selector("p.product-description")
        description = (
            await description_element.inner_text() if description_element else ""
        )
        url = await product_link.get_attribute("href")
        products.append({"name": name, "description": description, "url": url})
    return products


async def get_product_details(page):
    """
    [Function description]
    Extracts detailed information about each product displayed on the current marketplace page.

    This function automates the extraction of product information such as:
    - Product name
    - Product URL
    - Number of reviews
    - Actions like Add to Cart, Add to Wish List, and Add to Compare

    [Usage preconditions]
    - The page must be opened and should contain a list of products from which to gather details.

    Args:
    page : A Playwright `Page` instance pointing to the product listing page.

    Returns:
    list of dict
        A list where each element is a dictionary with keys:
        - "name" (str): The name of the product.
        - "url" (str): The URL to access the product page.
        - "reviews" (str or None): Number of reviews if present, or None.
        - "actions" (dict): Contains 'add_to_cart', 'add_to_wish_list', and 'add_to_compare' boolean values indicating availability.
    """
    await page.goto("/")
    product_elements = await page.query_selector_all(
        'main a[href]:not([id]):not([class*="icon"]):not([title])'
    )
    product_details = []
    for product_anchor in product_elements:
        name = await (await product_anchor.get_property("innerText")).json_value()
        url = await (await product_anchor.get_property("href")).json_value()
        reviews_url = f"{url}#reviews"
        reviews_element = await page.query_selector(f'a[href="{reviews_url}"]')
        reviews = (
            await (await reviews_element.get_property("innerText")).json_value()
            if reviews_element
            else None
        )
        add_to_cart = await page.query_selector(
            f'a[href="{url}"] + button:has-text("Add to Cart")'
        )
        add_to_wish_list = await page.query_selector(
            f'a[href="{url}"] ~ a:has-text("Add to Wish List")'
        )
        add_to_compare = await page.query_selector(
            f'a[href="{url}"] ~ a:has-text("Add to Compare")'
        )
        actions = {
            "add_to_cart": bool(add_to_cart),
            "add_to_wish_list": bool(add_to_wish_list),
            "add_to_compare": bool(add_to_compare),
        }
        product_details.append(
            {"name": name.strip(), "url": url, "reviews": reviews, "actions": actions}
        )
    return product_details


async def retrieve_navigation_categories(page):
    """
    [Function description]
    Retrieves all categories listed in the navigation bar of a webpage.

    This function automates the extraction of category names and their associated URLs
    from the navigation bar of the current page. It identifies menu items within the
    navigation tablist and gathers their displayed text (category name) and link URL.

    [Usage preconditions]
    - This API retrieves category information for the webpage **you are currently at**.
    - **You must already be on a webpage with a visible navigation bar containing categories**.

    Args:
    page : A Playwright `Page` instance that controls browser automation.

    Returns:
    list of dict
        A list of dictionaries where each dictionary contains:
        - "name" (str): The name of the category.
        - "url" (str): The URL associated with the category.
    """
    await page.goto("/")
    categories_data = []
    categories = await page.query_selector_all("tablist > menu > menuitem")
    for category in categories:
        name = await category.inner_text()
        url = await category.get_attribute("href")
        categories_data.append({"name": name, "url": url})
    return categories_data


async def extract_product_reviews_and_urls(page):
    """
    [Function description]
    Extracts product reviews and their URLs from the current page.

    This function automates the extraction of review counts and corresponding
    URLs for each product present on the page. It collects information about
    the number of reviews and provides the URL that links directly to the reviews.

    [Usage preconditions]
    - This function assumes that the current page is a product listing page.

    Args:
    page :  A Playwright `Page` instance that controls browser automation.

    Returns:
    list of dict
        A list of dictionaries where each dictionary contains the following keys:
        - "product_name" (str): The name of the product.
        - "reviews_count" (str): The number of reviews the product has.
        - "review_url" (str): The URL to the product's review page.
    """
    await page.goto("/")
    reviews_info = []
    product_review_links = await page.query_selector_all('a[href*="#reviews"]')
    for review_link in product_review_links:
        reviews_count = await review_link.inner_text()
        review_url = await review_link.get_attribute("href")
        product_name_elem = await review_link.evaluate_handle(
            '(elem) => elem.closest(".product-item").querySelector(".product-item-name a")'
        )
        product_name = (
            await product_name_elem.inner_text() if product_name_elem else "Unknown"
        )
        reviews_info.append(
            {
                "product_name": product_name.strip(),
                "reviews_count": reviews_count.strip(),
                "review_url": review_url.strip(),
            }
        )
    return reviews_info


async def extract_recent_orders_details(page):
    """
    [Function description]
    Extract details of recent orders such as order number, date, shipping recipient, total amount, and status.

    This function automates the extraction of details from the recent orders table.
    It gathers information about each recent order visible on the page, including:

    - Order number
    - Date of the order
    - Shipping recipient
    - Total amount for the order
    - Order status

    [Usage preconditions]
    - You must already be on the page containing the recent orders table.

    Args:
    page : A Playwright `Page` instance that controls browser automation.

    Returns:
    list of dict
        A list of dictionaries where each dictionary contains the following keys:
        - "order_number" (str): The unique number of the order.
        - "date" (str): The date when the order was placed.
        - "ship_to" (str): The recipient of the shipment.
        - "total_amount" (str): The total amount of the order.
        - "status" (str): The current status of the order.

    """
    await page.goto("/customer/account/")
    orders = []
    rows = await page.query_selector_all(
        "table:has(caption:has-text('Recent Orders')) tbody tr"
    )
    for row in rows:
        cells = await row.query_selector_all("td")
        order_info = {
            "order_number": (await cells[0].text_content()).strip(),
            "date": (await cells[1].text_content()).strip(),
            "ship_to": (await cells[2].text_content()).strip(),
            "total_amount": (await cells[3].text_content()).strip(),
            "status": (await cells[4].text_content()).strip(),
        }
        orders.append(order_info)
    return orders


async def fetch_beauty_category_counts(page):
    """
    [Function description]
    Retrieves category-wise product counts within the 'Beauty & Personal Care' section.

    This function extracts details about the different categories under 'Beauty & Personal Care' on the current page
    and counts of the items available in each category.

    [Usage preconditions]
    - This API should be used when you are on the 'Beauty & Personal Care' section of the website.
    - Ensure that the page is fully loaded before invoking this function.

    Args:
    page : A Playwright `Page` instance that controls browser automation.


    Returns:
    list of dict
        A list of dictionaries where each dictionary contains:
        - "category" (str): The name of the category.
        - "count" (int): The number of items in the category.
    """
    await page.goto("/beauty-personal-care.html")
    categories = await page.query_selector_all("main definition:nth-of-type(1) link")
    category_counts = []
    for category in categories:
        name_handle = await category.inner_text()
        try:
            name, count = name_handle.split("(")
            count = int(count.strip(" item )"))
        except ValueError:
            continue
        category_counts.append({"category": name.strip(), "count": count})
    return category_counts


async def extract_product_showcases(page):
    """
    [Function description]
    Extracts product names, prices, and URLs from the 'Product Showcases' section on the current page.

    This function automates the retrieval of products listed under the 'Product Showcases' section
    on the loaded page. It accumulates product details including:

    - Product name
    - Product URL
    - Product price (if available)

    [Usage preconditions]
    - Ensure you are currently on a page containing the 'Product Showcases' information before calling this function.

    Args:
    page : A Playwright `Page` instance that controls browser automation.


    Returns:
    list of dict
        A list of dictionaries where each dictionary contains:
        - "name" (str): The name of the product.
        - "url" (str): The URL of the product.
        - "price" (str): The price of the product, if available.
    """
    await page.goto("/")
    products = await page.query_selector_all("css=selector-for-product-item")
    product_list = []
    for product in products:
        name_element = await product.query_selector("css=selector-for-product-name")
        url_element = await product.query_selector("css=selector-for-product-url")
        price_element = await product.query_selector("css=selector-for-price")
        if name_element and url_element:
            name = await name_element.text_content()
            url = await url_element.get_attribute("href")
            price = await price_element.text_content() if price_element else ""
            product_list.append({"name": name, "url": url, "price": price})
    return product_list


async def gather_product_categories(page):
    """
    [Function description]
    Gathers all product categories and their corresponding URLs from the navigation menu.

    This function extracts the list of product categories available on an e-commerce site
    by searching for menu items in the site’s navigation section.
    It retrieves the name and URL for each category, providing users with efficient access
    to site navigation options.

    [Usage preconditions]
    - The function is meant to gather data from an e-commerce website's navigation bar.
    - **You must already be on a page where the navigation bar is accessible before calling this function.**

    Args:
    page : A Playwright `Page` instance that controls browser automation.

    Returns:
    list of dict
        A list of dictionaries where each dictionary contains the following keys:
        - "category" (str): The name of the product category.
        - "url" (str): The URL associated with the category.
    """
    await page.goto("/")
    product_categories = []
    menu_items = await page.query_selector_all("tablist >> tabpanel menu >> menuitem")
    for item in menu_items:
        category_name = await item.inner_text()
        category_url = await item.get_attribute("url")
        if category_url is None:
            category_url = await item.get_attribute("href")
        if category_url:
            product_categories.append(
                {"category": category_name.strip(), "url": category_url.strip()}
            )
    return product_categories


async def extract_cart_items_info(page):
    """
    Extracts names and URLs for all items in the user's cart.

    This function extracts each item's name and corresponding URL from the cart section of the current page.

    Usage preconditions:
    - You must already be on the page that displays the user's cart contents.

    Args:
    page : Playwright `Page` instance controlling browser automation.

    Returns:
    list of dict
        A list of dictionaries, each containing:
        - "name" (str): The name of the cart item.
        - "url" (str): The URL link to the cart item.
    """
    await page.goto("/")
    cart_items = []
    item_elements = await page.query_selector_all(".cart-item")
    for item in item_elements:
        name_element = await item.query_selector(".item-name")
        url_element = await item.query_selector("a")
        if name_element and url_element:
            name = await name_element.inner_text()
            url = await url_element.get_attribute("href")
            cart_items.append({"name": name, "url": url})
    return cart_items

async def aggregate_product_reviews(page):
    """
    [Function description]
    Aggregates review information for products listed on the page.

    This function automates the extraction of review information for each product listed on the current page.
    It gathers the number of reviews and corresponding review URLs.

    [Usage preconditions]
    - This API aggregates review information for products on the page you are currently viewing.
    - **You must already be on a page that lists products, with each potentially having a reviews section, before calling this function.**

    Args:
    page :  A Playwright `Page` instance that controls browser automation.

    Returns:
    list of dict
        A list of dictionaries where each dictionary contains the following keys:
        - "reviews_count" (str): The number of reviews for the product.
        - "reviews_url" (str): The URL leading to the product's reviews section.
    """
    await page.goto("/")
    review_info_list = []
    review_elements = await page.query_selector_all('a:has-text("Reviews")')
    for review_element in review_elements:
        reviews_count = await review_element.inner_text()
        reviews_url = await review_element.get_attribute("href")
        review_info_list.append(
            {"reviews_count": reviews_count, "reviews_url": reviews_url}
        )
    return review_info_list


async def compile_product_action_urls(page):
    """
    [Function description]
    Compiles URLs for 'Add to Cart', 'Add to Wish List', and 'Add to Compare' actions for each product on the page.

    This function navigates through a product listing page and extracts action URLs associated with each product, allowing users to add items to their cart, wish list, or compare list.

    [Usage preconditions]
    - The function requires that you are on an e-commerce product listing page where these actions are applicable.

    Args:
    page : A Playwright `Page` instance that controls browser automation.

    Returns:
    list of dict
        A list of dictionaries, each containing the product name and its associated action URLs for 'Add to Cart', 'Add to Wish List', and 'Add to Compare'.
    """
    await page.goto("/")
    results = []
    products = await page.query_selector_all('div:has(a[href*="/product/"])')
    for product in products:
        product_name_element = await product.query_selector('a[href*=".html"]')
        product_name = (
            await (await product_name_element.get_property("innerText")).json_value()
            if product_name_element
            else ""
        )
        add_to_cart = await product.query_selector('button:has-text("Add to Cart")')
        add_to_wish_list = await product.query_selector(
            'a:has-text("Add to Wish List")'
        )
        add_to_compare = await product.query_selector('a:has-text("Add to Compare")')
        add_to_cart_url = (
            await (await add_to_cart.get_property("href")).json_value()
            if add_to_cart
            else ""
        )
        add_to_wish_list_url = (
            await (await add_to_wish_list.get_property("href")).json_value()
            if add_to_wish_list
            else ""
        )
        add_to_compare_url = (
            await (await add_to_compare.get_property("href")).json_value()
            if add_to_compare
            else ""
        )
        results.append(
            {
                "product_name": product_name,
                "add_to_cart_url": add_to_cart_url,
                "add_to_wish_list_url": add_to_wish_list_url,
                "add_to_compare_url": add_to_compare_url,
            }
        )
    return results


async def extract_homepage_category_links(page):
    """
    Extracts category names and their URLs from the homepage navigation menu.

    This function automates the extraction of category links directly from the site's homepage,
    enabling users to view available sections such as Electronics, Clothing, etc.
    It retrieves the name and URL for each category listed in the navigation tablist.

    Usage log:
    - Successfully used to compile category links on visiting the homepage.

    Args:
    page : A Playwright `Page` instance that controls browser automation.

    Returns:
    list of dict:
        A list of dictionaries where each dictionary contains:
        - "category_name" (str): The name of the category.
        - "url" (str): The URL leading to the category page.
    """
    await page.goto("/")
    categories = []
    menuitems = await page.query_selector_all("tablist menu menuitem")
    for item in menuitems:
        category_name = await item.inner_text()
        url = await item.get_attribute("href")
        if url:
            categories.append(
                {"category_name": category_name.strip(), "url": url.strip()}
            )
    return categories


async def extract_all_product_details(page):
    """
    [Function description]
    Extracts all product details on the current page, including information such as product names, prices, URLs, number of reviews, and available actions (Add to Cart/Wish List/Compare).

    This function automates the process of gathering a comprehensive set of details for each product listed on the current webpage.
    It retrieves:
    - Product name
    - Price
    - Product URL
    - Number of reviews
    - Available actions (e.g., Add to Cart, Add to Wish List, Add to Compare)

    [Usage preconditions]
    - **You must already be on a webpage containing a list of products before calling this function.**

    Args:
    page : A Playwright `Page` instance that controls browser automation.

    Returns:
    list of dict
        A list of dictionaries where each dictionary contains the following keys:
        - "name" (str): The product name.
        - "price" (str or None): The product price (if available).
        - "url" (str): The product URL.
        - "reviews" (str or None): The number of reviews (if available).
        - "actions" (list): A list of available actions (e.g., Add to Cart, Add to Wish List).
    """
    await page.goto("/")
    product_details = []
    product_elements = await page.query_selector_all(".product-item")
    for product in product_elements:
        name_element = await product.query_selector(".product-name a")
        url = (
            await (await name_element.get_property("href")).json_value()
            if name_element
            else None
        )
        name = (
            await (await name_element.get_property("innerText")).json_value()
            if name_element
            else None
        )
        price_element = await product.query_selector(".product-price")
        price = (
            await (await price_element.get_property("innerText")).json_value()
            if price_element
            else None
        )
        reviews_element = await product.query_selector(".product-reviews")
        reviews = (
            await (await reviews_element.get_property("innerText")).json_value()
            if reviews_element
            else None
        )
        actions = []
        add_to_cart = await product.query_selector("button.add-to-cart")
        if add_to_cart:
            actions.append("Add to Cart")
        add_to_wishlist = await product.query_selector("a.add-to-wishlist")
        if add_to_wishlist:
            actions.append("Add to Wish List")
        add_to_compare = await product.query_selector("a.add-to-compare")
        if add_to_compare:
            actions.append("Add to Compare")
        product_details.append(
            {
                "name": name,
                "price": price,
                "url": url,
                "reviews": reviews,
                "actions": actions,
            }
        )
    return product_details


async def list_navigation_categories(page):
    """
    [Function description]
    Retrieves category names and URLs from the navigation menu on a given webpage.
    This function automates the process of extracting categories listed in the navigation bar.
    It interacts with the navigation bar elements to gather the names of each category and its corresponding URL.

    [Usage preconditions]
    - Ensure you are accessing a webpage with a navigation menu containing categories.
    - The navigation menu should be structured using tablist, tabpanel, and menu elements.

    Args:
    page : A Playwright `Page` instance that controls browser automation.

    Returns:
    list of dict
        A list of dictionaries where each dictionary contains:
        - "category" (str): The name of the category.
        - "url" (str): The URL linked to the category.
    """
    await page.goto("/")
    categories = []
    menu_items = await page.query_selector_all("tablist > tabpanel > menu > menuitem")
    for item in menu_items:
        category_name = await item.inner_text()
        category_url = await item.get_attribute("href")
        if category_url:
            categories.append({"category": category_name, "url": category_url})
    return categories



async def extract_electronics_product_details(page):
    """
    Extracts all electronics products listed on the page, including their names, prices, and detail URLs.

    [Usage preconditions]
    - This API extracts electronics product information from the current page.
    - You must already be on the electronics products listing page before calling this function.

    Args:
    page :  A Playwright `Page` instance that controls browser automation.

    Returns:
    list of dict
        A list of dictionaries where each dictionary contains:
        - "name" (str): The name of the product.
        - "price" (str): The price of the product.
        - "detail_url" (str): The URL to the product details page.
    """
    await page.goto("/electronics.html")
    product_list = []
    product_elements = await page.query_selector_all(".product-item")
    for element in product_elements:
        name_element = await element.query_selector(".product-item-link")
        detail_url = await (await name_element.get_property("href")).json_value()
        name = await name_element.inner_text()
        price_element = await element.query_selector(".price")
        price = await price_element.inner_text() if price_element else "N/A"
        product_list.append({"name": name, "price": price, "detail_url": detail_url})
    return product_list


async def list_electronics_product_categories(page):
    """
    [Function description]
    Identifies and lists all available product categories under 'Electronics', along with their respective item counts.

    This function extracts information regarding product categories from the Electronics section.
    It lists all sub-categories and their item counts displayed on the page.

    [Usage preconditions]
    - This API retrieves product category information for the Electronics section of the website.
    - **You must already be on the Electronics page before calling this function.**

    Args:
    page : A Playwright `Page` instance that controls browser automation.

    Returns:
    list of dict
        A list of dictionaries where each dictionary contains the following keys:
        - "category" (str): The name of the product category.
        - "count" (int): The count of items available in that category.
    """
    await page.goto("/electronics.html")
    category_elements = await page.query_selector_all("div.definition > ul > li > a")
    categories = []
    for element in category_elements:
        category_text = await element.inner_text()
        category_name, item_count = category_text.rsplit("(", 1)
        category_name = category_name.strip()
        item_count = int(item_count.split(" ")[0])
        categories.append({"category": category_name, "count": item_count})
    return categories


async def get_home_kitchen_category_counts(page):
    """
    [Function description]
    Retrieves category names and their respective product counts from the 'Home & Kitchen' section.

    This function automates the extraction of product categories and their item counts
    displayed in the 'Home & Kitchen' section for insights on inventory or navigation.

    [Usage preconditions]
    - You must be on the 'Home & Kitchen' section page of the website.

    Args:
    page : A Playwright `Page` instance that controls browser automation.

    Returns:
    list of dict
        A list of dictionaries where each dictionary contains the following keys:
        - "category_name" (str): The name of the product category.
        - "item_count" (int): The number of items in the category.
    """
    await page.goto("/home-kitchen.html")
    category_count_elements = await page.query_selector_all("definition link")
    categories_data = []
    for element in category_count_elements:
        category_text = await element.text_content()
        category_name, item_count_text = category_text.rsplit("(", 1)
        item_count = int(item_count_text.split(" ")[0])
        categories_data.append(
            {"category_name": category_name.strip(), "item_count": item_count}
        )
    return categories_data



async def extract_product_showcases_details(page):
    """
    [Function description]
    Extracts detailed product information from the 'Product Showcases' section of the current webpage,
    including product names, prices, review counts, and product URLs.

    [Usage preconditions]
    - The Playwright `page` should be referencing a webpage that includes a 'Product Showcases' section.

    Args:
    page : A Playwright `Page` instance that provides functionalities for controlling a webpage.

    Returns:
    list of dict
        A list of dictionaries, each containing:
        - "name" (str): The name of the product.
        - "url" (str): The URL to the product's details page.
        - "reviews" (str): The number of reviews for the product, if available.
        - "price" (str): The price of the product, if available.
    """
    await page.goto("/")
    product_showcases = await page.query_selector_all('main a:not([href*="#reviews"])')
    product_data = []
    for product in product_showcases:
        name_element = await product.get_property("innerText")
        url_property = await product.get_property("href")
        reviews_element = (
            await (await product.query_selector('a[href*="#reviews"]')).text_content()
            if await product.query_selector('a[href*="#reviews"]')
            else "0 Reviews"
        )
        price_element = await product.query_selector("span.price")
        price = (
            await price_element.inner_text() if price_element else "Price not available"
        )
        name = await name_element.json_value()
        url = await url_property.json_value()
        product_data.append(
            {
                "name": name,
                "url": url,
                "reviews": reviews_element.strip(),
                "price": price.strip(),
            }
        )
    return product_data


async def extract_navigation_menu_categories(page):
    """
    Extract category names and URLs from the navigation menu for efficient user access.

    This function automates the retrieval of category names and their associated URLs
    from the navigation menu on a webpage. It allows for efficient access to different categories,
    enhancing user navigation and interaction with the website.

    [Usage preconditions]
    - You must be on a webpage that contains a navigation menu structured as a tabpanel with menu items.

    Args:
    page : A Playwright `Page` instance for browser automation.

    Returns:
    list of dict
        A list of dictionaries where each dictionary represents a category with:
        - "name" (str): The text name of the category.
        - "url" (str): The URL link related to the category.
    """
    await page.goto("/")
    categories = []
    menu_items = await page.query_selector_all("tabpanel menu menuitem")
    for item in menu_items:
        name_element = await item.inner_text() if item else "Unnamed"
        link_element = await item.get_attribute("url") if item else "#/"
        categories.append({"name": name_element.strip(), "url": link_element})
    return categories


async def retrieve_recent_order_details(page):
    """
    Retrieves recent orders information from the user's account to manage and track purchase history effectively.

    This function automates the extraction of recent order details from the user's account page. It gathers information about
    each order, including:

    - Order ID
    - Order date
    - Product details (name, quantity, price)
    - Order status

    [Usage preconditions]
    - You must already be on the 'Orders' section of the user's account page.

    Args:
    page :  A Playwright `Page` instance that controls browser automation.

    Returns:
    list of dict
        A list of dictionaries where each dictionary contains the following keys:
        - "order_id" (str): The ID of the order.
        - "order_date" (str): The date when the order was placed.
        - "products" (list of dict): A list of products, each with "name", "quantity", and "price".
        - "status" (str): The current status of the order.
    """
    await page.goto("/")
    orders = []
    order_elements = await page.query_selector_all("div.order-item")
    for order_element in order_elements:
        order_id_element = await order_element.query_selector("span.order-id")
        order_date_element = await order_element.query_selector("span.order-date")
        status_element = await order_element.query_selector("span.order-status")
        order_id = await order_id_element.text_content() if order_id_element else None
        order_date = (
            await order_date_element.text_content() if order_date_element else None
        )
        status = await status_element.text_content() if status_element else None
        product_elements = await order_element.query_selector_all("div.product-info")
        products = []
        for product_element in product_elements:
            name_element = await product_element.query_selector("span.product-name")
            quantity_element = await product_element.query_selector(
                "span.product-quantity"
            )
            price_element = await product_element.query_selector("span.product-price")
            product_name = await name_element.text_content() if name_element else None
            quantity = (
                await quantity_element.text_content() if quantity_element else None
            )
            price = await price_element.text_content() if price_element else None
            products.append(
                {"name": product_name, "quantity": quantity, "price": price}
            )
        orders.append(
            {
                "order_id": order_id,
                "order_date": order_date,
                "products": products,
                "status": status,
            }
        )
    return orders


async def extract_home_kitchen_product_details(page):
    """
    [Function description]
    Extracts product details from the "Home & Kitchen" category page.

    This function automates the extraction of each product's details including:
    - Product name
    - Product details URL

    [Usage preconditions]
    - Must be on the "Home & Kitchen" category page before calling this function.

    Args:
    page : A Playwright `Page` instance that controls browser automation.

    Returns:
    list of dict
        A list of dictionaries where each dictionary contains the following keys:
        - "name" (str): The product name.
        - "url" (str): The product details page URL.
    """
    await page.goto("/home-kitchen.html")
    products = []
    product_elements = await page.query_selector_all(
        'main a[href]:has-text("cabinet"), main a[href]:has-text("table")'
    )
    for element in product_elements:
        name = await element.text_content()
        url = await element.get_attribute("href")
        product = {"name": name.strip() if name else "N/A", "url": url}
        products.append(product)
    return products


async def retrieve_categories(page):
    """
    [Function description]
    Retrieve a complete list of categories from the current webpage.

    This function navigates through the categories menu of the page and
    extracts the name and URL for each category present.

    [Usage preconditions]
    - You must already be on the webpage containing the categories menu before calling this function.

    Args:
    page : A Playwright `Page` instance that controls browser automation.

    Returns:
    list of dict
        A list of dictionaries where each dictionary contains the following keys:
        - "name" (str): The name of the category.
        - "url" (str): The URL of the category.
    """
    await page.goto("/home-kitchen.html")
    category_elements = await page.query_selector_all("tabpanel menu menuitem")
    categories = []
    for element in category_elements:
        name = await (await element.get_property("text_content")).json_value()
        link_element = await element.query_selector("a")
        url = (
            await (await link_element.get_property("href")).json_value()
            if link_element
            else ""
        )
        categories.append({"name": name, "url": url})
    return categories


async def compile_beauty_personal_care_products(page):
    """
    [Function description]
    Compiles a list of products under the Beauty & Personal Care category.

    This function navigates through the Beauty & Personal Care section of a webpage
    and extracts comprehensive product details, including:
      - Product names
      - Prices
      - Detail URLs
      - Available actions (e.g., Add to Cart, Add to Wish List)

    [Usage preconditions]
    - You should be on the Beauty & Personal Care category page before calling this function.

    Args:
    page :  A Playwright `Page` instance that controls browser automation.

    Returns:
    list of dict
        A list of dictionaries where each dictionary contains the following keys:
        - "name" (str): The name of the product.
        - "price" (str): The price of the product, if available.
        - "url" (str): The URL for the product details.
        - "actions" (list of str): The available actions for the product (e.g., "Add to Cart", "Add to Wish List").
    """
    await page.goto("/beauty-personal-care.html")
    products = []
    product_elements = await page.query_selector_all("div.product-item")
    for product_element in product_elements:
        name_element = await product_element.query_selector("h2.product-name a")
        name = await name_element.inner_text()
        url = await name_element.get_attribute("href")
        price_element = await product_element.query_selector("span.price")
        price = (
            await price_element.inner_text() if price_element else "Price not available"
        )
        actions = []
        if await product_element.query_selector("button.add-to-cart"):
            actions.append("Add to Cart")
        if await product_element.query_selector("button.add-to-wish-list"):
            actions.append("Add to Wish List")
        products.append({"name": name, "price": price, "url": url, "actions": actions})
    return products


async def retrieve_beauty_subcategories(page):
    """
    [Function description]
    Retrieves all subcategories in Beauty & Personal Care along with their respective product counts.

    This function automates the extraction of subcategories and their product counts from the Beauty &
    Personal Care section on the current page. It gathers information about each subcategory,
    including:

    - Subcategory name
    - Product count

    [Usage preconditions]
    - This API retrieves subcategory information for the Beauty & Personal Care section **you are currently at**.
    - **You must already be on the Beauty & Personal Care page before calling this function.**

    Args:
    page :  A Playwright `Page` instance that controls browser automation.

    Returns:
    list of dict
        A list of dictionaries where each dictionary contains the following keys:
        - "subcategory" (str): The name of the subcategory.
        - "product_count" (int): The number of products in the subcategory.
    """
    await page.goto("/beauty-personal-care.html")
    subcategories = []
    elements = await page.query_selector_all("main definition > a")
    for element in elements:
        text_content = await element.text_content()
        subcategory_name, count_sentence = text_content.split("(")
        product_count = int(count_sentence.split(" item")[0].strip())
        subcategories.append(
            {"subcategory": subcategory_name.strip(), "product_count": product_count}
        )
    return subcategories


async def navigate_to_wishlist_page(page):
    """
    Navigate to the 'My Wish List' page.

    This function automates the process of accessing the My Wish List page
    by clicking the relevant link available on the homepage. It reliably
    facilitates navigation without requiring further input beyond starting
    on the homepage.

    [Usage preconditions]
    - Ensure to be on the homepage before executing this function.

    Args:
    page: A Playwright `Page` instance that controls browser automation.

    Usage log:
    - Successfully navigated to the wishlist page by clicking the wishlist link.

    """
    await page.goto("/")
    await page.get_by_role("link", name="My Wish List 2 items").click()


async def extract_wishlist_items(page):
    """
    [Function description]
    Extracts all wishlist items information from the current 'My Wish List' page.
    This function automates the retrieval of details for each product on the page,
    including product names, prices, URLs, and review counts or links.

    [Usage preconditions]
    - This API extracts wishlist information for the wishlist page **you are currently at**.
    - **You must already be on your wishlist page before calling this function.**

    Args:
    page : A Playwright `Page` instance that controls browser automation.

    Returns:
    list of dict
        A list of dictionaries where each dictionary contains the following keys:
        - "name" (str): The product name.
        - "price" (str): The product price.
        - "url" (str): The URL to the product's detail page.
        - "reviews" (str): The reviews link or count.
    """
    await page.goto("/wishlist/")
    items = await page.query_selector_all(".wishlist-item")
    wishlist_data = []
    for item in items:
        name_element = await item.query_selector(".product-name-selector")
        name = await name_element.inner_text()
        price_element = await item.query_selector(".product-price-selector")
        price = await price_element.inner_text()
        url_element = await item.query_selector(".product-url-selector")
        url = await (await url_element.get_property("href")).json_value()
        review_element = await item.query_selector(".product-review-selector")
        reviews = await review_element.inner_text()
        wishlist_data.append(
            {"name": name, "price": price, "url": url, "reviews": reviews}
        )
    return wishlist_data


async def compile_comparison_product_details(page):
    """
    [Function description]
    Gathers information about products listed under 'Compare Products'.

    This function automates the extraction of product details from the 'Compare Products' section.
    It collects:
    - Product names
    - Product URL links
    - Review details

    [Usage preconditions]
    - This API retrieves product comparison information from the 'Compare Products' section of the page.
    - **You must already be on the page containing the 'Compare Products' listings before calling this function.**

    Args:
    page: A Playwright `Page` instance that controls browser automation.

    Returns:
    list of dict
        A list of dictionaries where each dictionary contains:
        - "name" (str): The product name.
        - "url" (str): The URL link to the product.
        - "review" (str): The product review details.
    """
    await page.goto("/wishlist/")
    products = []
    product_elements = await page.query_selector_all("[data-compare-product]")
    for product_element in product_elements:
        name_element = await product_element.query_selector(".product-name")
        product_name = (
            await name_element.text_content() if name_element else ""
        ).strip()
        url_element = await product_element.query_selector("a.product-link")
        product_url = await url_element.get_attribute("href") if url_element else ""
        review_element = await product_element.query_selector(".product-review")
        product_review = (
            await review_element.text_content() if review_element else ""
        ).strip()
        product_details = {
            "name": product_name,
            "url": product_url,
            "review": product_review,
        }
        products.append(product_details)
    return products


async def extract_account_links(page):
    """
    [Function description]
    Extracts URLs and names for all account-related links on the current page.

    This function automates the collection of URLs and names for actions such as 'My Account',
    'Address Book', and 'Stored Payment Methods'. This enables quick navigation and management
    of user account-related sections.

    [Usage preconditions]
    - The function assumes the current page contains user account management links.
    - **You must already be on a page containing account-related actions before calling this function.**

    Args:
    page : A Playwright `Page` instance that controls browser automation.

    Returns:
    list of dict
        A list of dictionaries where each dictionary contains:
        - "name" (str): The name of the account-related link.
        - "url" (str): The URL associated with that link.
    """
    await page.goto("/wishlist/")
    account_links = []
    selectors = [
        'text="My Account"',
        'text="Address Book"',
        'text="Stored Payment Methods"',
        'text="My Orders"',
        'text="My Downloadable Products"',
        'text="Account Information"',
        'text="My Product Reviews"',
        'text="Newsletter Subscriptions"',
    ]
    for selector in selectors:
        element_handle = await page.query_selector(selector)
        if element_handle:
            url = await (await element_handle.get_property("href")).json_value()
            name = await (await element_handle.get_property("innerText")).json_value()
            account_links.append({"name": name.strip(), "url": url})
    return account_links



async def extract_beauty_personal_care_products(page):
    """
    [Function description]
    Extracts details of products from the current page in the 'Beauty & Personal Care' section.

    This function automates the extraction of product information from a web page,
    specifically targeting the 'Beauty & Personal Care' section, gathering details including:

    - Product name
    - Product URL
    - Price
    - Review count

    [Usage preconditions]
    - Ensure you are on a web page featuring products in the 'Beauty & Personal Care' section.

    Args:
    page : A Playwright `Page` instance that controls browser automation.

    Returns:
    list of dict
        A list of dictionaries where each dictionary contains the following keys:
        - "name" (str): The product name.
        - "url" (str): The product URL.
        - "price" (str): The product price.
        - "reviews" (str): The count of reviews for the product.
    """
    await page.goto("/beauty-personal-care.html?p=2")
    product_elements = await page.query_selector_all(".product-item")
    product_data = []
    for product in product_elements:
        name_element = await product.query_selector("a[href]")
        name = await name_element.inner_text() if name_element else ""
        url = await name_element.get_attribute("href") if name_element else ""
        price_element = await product.query_selector(".price")
        price = await price_element.inner_text() if price_element else ""
        review_element = await product.query_selector(".reviews-count")
        reviews = await review_element.inner_text() if review_element else ""
        product_data.append(
            {"name": name, "url": url, "price": price, "reviews": reviews}
        )
    return product_data


async def collect_beauty_personal_care_item_counts(page):
    """
    Collect the number of items listed under each Beauty & Personal Care category on the current page.

    This function scrapes data from a webpage that lists various categories under
    Beauty & Personal Care and the number of items contained in each category.
    It works by selecting elements that contain the categories and their respective counts.

    Usage preconditions:
    - This API should be called when the browser page is already on the Beauty & Personal Care section.
    - The page should contain elements listing categories with their item counts.

    Args:
    page : A Playwright `Page` instance that represents the webpage.

    Returns:
    dict : A dictionary where keys are the category names, and values are the number of items in those categories.
    """
    await page.goto("/beauty-personal-care.html?p=2")
    categories_selector = "section.definition a"
    categories_elements = await page.query_selector_all(categories_selector)
    item_counts = {}
    for category_element in categories_elements:
        category_text = await category_element.inner_text()
        name, count_str = category_text.rsplit("(", 1)
        count = int(count_str.split(" ")[0])
        item_counts[name.strip()] = count
    return item_counts


async def extract_video_games_product_details(page):
    """
    [Function description]
    Extracts product details on the current 'Video Games' page.

    This function gathers information about all products listed on the current
    'Video Games' section of the website, capturing each product's name, URL,
    and other available details such as the number of reviews.

    [Usage preconditions]
    - This API extracts information from the 'Video Games' page **you are currently at**.
    - **Ensure you are already on the 'Video Games' page before calling this function.**

    Args:
    page :  A Playwright `Page` instance that controls browser automation.

    Returns:
    list of dict
        A list of dictionaries where each dictionary contains product information:
        - "name" (str): The product name.
        - "url" (str): The URL link to the product.
        - "reviews" (optional, str): Review count if available.
    """
    await page.goto("/video-games.html")
    product_details = []
    product_elements = await page.query_selector_all("main a")
    for product_element in product_elements:
        name = await product_element.text_content()
        url = await product_element.get_attribute("href")
        reviews_element = await product_element.query_selector("+ .reviews")
        reviews = (
            await reviews_element.text_content() if reviews_element else "No reviews"
        )
        product_details.append(
            {
                "name": name.strip() if name else "Unnamed Product",
                "url": url,
                "reviews": reviews.strip() if reviews else "No reviews",
            }
        )
    return product_details


async def get_video_games_subcategories(page):
    """
    [Function description]
    Compile a list of all subcategories and their item counts under 'Video Games'.

    This function automates the task of gathering subcategory titles and their respective item counts
    under the 'Video Games' section. It extracts this information from the current page using Playwright.

    [Usage preconditions]
    - This function must be executed while on the 'Video Games' page.

    Args:
    page : A Playwright `Page` instance that controls browser automation.

    Returns:
    list of dict
        A list of dictionaries where each dictionary contains:
        - "subcategory" (str): Subcategory name.
        - "items" (int): The number of items in the subcategory.
    """
    await page.goto("/video-games.html")
    subcategory_links = await page.query_selector_all("main definition a")
    subcategories = []
    for link_element in subcategory_links:
        full_text = await link_element.text_content()
        subcategory_name, item_count = full_text.rsplit("(", 1)
        item_count = int(item_count.split(" ", 1)[0])
        subcategories.append(
            {"subcategory": subcategory_name.strip(), "items": item_count}
        )
    return subcategories


async def filter_video_games_by_price(page, min_price, max_price):
    """
    [Function description]
    Filters the video games list by a specified price range and retrieves the products within that range.

    This function filters video game products on an e-commerce platform by a specified price range. It collects and returns
    a list of products' titles and URLs that fall within the defined price range.

    [Usage preconditions]
    - The current page should be the 'Video Games' product listing page.
    - The price range is defined by `min_price` and `max_price`.

    Args:
    page : Playwright `Page`
        A Playwright page instance controlling the browser automation.
    min_price : float
        Minimum price value for filtering products.
    max_price : float
        Maximum price value for filtering products.

    Returns:
    list of dict
        A list containing dictionaries of products with the following keys:
        - "title" (str): The title of the video game product.
        - "url" (str): The URL to the product's details page.
    """
    await page.goto("/video-games.html")
    products = []
    product_elements = await page.query_selector_all(".product-item-info")
    for product in product_elements:
        title_element = await product.query_selector(".product-item-link")
        price_element = await product.query_selector(".price")
        if title_element and price_element:
            url = await title_element.get_attribute("href")
            title = await title_element.text_content()
            price_text = await price_element.text_content()
            price = float(price_text.replace("$", "").replace(",", "").strip())
            if min_price <= price <= max_price:
                products.append({"title": title.strip(), "url": url})
    return products


async def retrieve_electronics_products(page):
    """
    [Function description]
    Retrieves the entire product list from the Electronics section, including product names, URLs, and prices, spanning all pages in the category.

    This function automates the gathering of product information from the Electronics section of a website. It iterates through all pagination in the section
    and extracts relevant details for each product, namely:
    - Product Name
    - URL to product
    - Price

    [Usage preconditions]
    - You need to be on the Electronics section landing page.

    Args:
    page :  A Playwright `Page` instance that controls browser automation.

    Returns:
    list of dict
        A list of dictionaries where each dictionary contains:
        - "name" (str): The name of the product.
        - "url" (str): The product detail URL.
        - "price" (str): The price of the product
    """
    await page.goto("/electronics.html")
    products = []
    while True:
        items = await page.query_selector_all(".product-item")
        for item in items:
            name_selector = await item.query_selector(".product-name a")
            price_selector = await item.query_selector(".product-price")
            url_selector = await item.query_selector(".product-name a")
            if name_selector and url_selector and price_selector:
                name = await (
                    await name_selector.get_property("innerText")
                ).json_value()
                url = await (await url_selector.get_property("href")).json_value()
                price = await (
                    await price_selector.get_property("innerText")
                ).json_value()
                products.append(
                    {"name": name.strip(), "url": url.strip(), "price": price.strip()}
                )
        next_button = await page.query_selector('a[rel="next"]')
        if next_button:
            await next_button.click()
            await page.wait_for_load_state("networkidle")
        else:
            break
    return products


async def list_electronics_subcategories_with_counts(page):
    """
    Identifies and collects all subcategories under the Electronics section along with their respective item counts.

    This function automates the extraction of subcategories and item counts from the Electronics section of the page.

    - Electronics Subcategory Name
    - Item Count within the subcategory

    [Usage preconditions]
    - This API function assumes you are already on the Electronics section page.

    Args:
    page : A Playwright `Page` instance that controls browser automation.

    Returns:
    list of dict
        A list of dictionaries where each dictionary contains:
        - "subcategory" (str): The name of the subcategory.
        - "item_count" (int): The numerical count of items within that subcategory.
    """
    await page.goto("/electronics.html")
    subcategories = await page.query_selector_all("main > definition > link")
    subcategories_info = []
    for subcategory in subcategories:
        category_name_text = await subcategory.inner_text()
        split_text = category_name_text.split("(")
        category_name = split_text[0].strip()
        item_count_text = split_text[1].split()[0]
        item_count = int(item_count_text)
        subcategories_info.append(
            {"subcategory": category_name, "item_count": item_count}
        )
    return subcategories_info


async def main(page):
    subcategory_info = await list_electronics_subcategories_with_counts(page)
    print(subcategory_info)


async def aggregate_product_reviews_and_ratings(page):
    """
    [Function description]
    Aggregates reviews and ratings for each product in the Electronics section.

    This function automates the process of extracting review counts and review URLs
    for each product listed in the Electronics section of an e-commerce site.
    It gathers all relevant details needed for decision-making related to product reviews.

    [Usage preconditions]
    - The function assumes the page is already navigated to the Electronics section.

    Args:
    page : A Playwright `Page` instance that controls browser automation.

    Returns:
    list of dict
        A list of dictionaries where each dictionary contains the following keys:
        - "name" (str): The product name.
        - "reviews_count" (int): The number of reviews if available, otherwise 0.
        - "reviews_url" (str): The URL to the reviews page if available, otherwise an empty string.
    """
    await page.goto("/electronics.html")
    products = await page.query_selector_all("main link")
    results = []
    for product in products:
        name_element = await (await product.query_selector("link")).text_content()
        reviews_element = await product.query_selector('link:-soup-contains("Reviews")')
        if reviews_element:
            reviews_text = await reviews_element.text_content()
            reviews_count = int(reviews_text.split()[0])
            reviews_url = await reviews_element.get_attribute("href")
        else:
            reviews_count = 0
            reviews_url = ""
        product_info = {
            "name": name_element.strip(),
            "reviews_count": reviews_count,
            "reviews_url": reviews_url.strip(),
        }
        results.append(product_info)
    return results


async def demonstrate_navigate_to_beauty_personal_care_category(page):
    """
    Demonstrates the use of the `navigate_to_category` function to navigate to the 'Beauty & Personal Care' category.

    Usage:
    - Shows how to navigate directly to 'Beauty & Personal Care' from the homepage of the 'One Stop Market' website.

    Args:
    page: A Playwright `Page` instance controlling browser automation.
    """
    await page.goto("/")
    await navigate_to_category(page, "Beauty & Personal Care")


async def extract_beauty_and_personal_care_products(page):
    """
    [Function description]
    Extracts all visible products in the 'Beauty & Personal Care' section, capturing product names, prices, URLs, and available actions or reviews.

    [Usage preconditions]
    - This API extracts products specifically from the current page under the 'Beauty & Personal Care' section.
    - **You must be on a page listing products in the 'Beauty & Personal Care' category.**

    Args:
    page : A Playwright `Page` instance that controls browser automation.

    Returns:
    list of dict
        A list of dictionaries where each dictionary contains:
        - "name" (str): The name of the product.
        - "price" (str): Price of the product (if available).
        - "url" (str): The product URL.
        - "actions" (list): Available actions like Add to Cart, Add to Wish List, etc.
        - "reviews" (str | None): Review information if available.
    """
    await page.goto("/beauty-personal-care.html")
    product_selector = ".product-item"
    products = await page.query_selector_all(product_selector)
    product_details = []
    for product in products:
        name_elem = await product.query_selector(".product-item-name a")
        name = (
            await (await name_elem.get_property("innerText")).json_value()
            if name_elem
            else ""
        )
        price_elem = await product.query_selector(".price")
        price = (
            await (await price_elem.get_property("innerText")).json_value()
            if price_elem
            else ""
        )
        url_elem = await product.query_selector(".product-item-name a")
        url = (
            await (await url_elem.get_property("href")).json_value() if url_elem else ""
        )
        actions_elem = await product.query_selector_all(".action-links a")
        actions = [
            (await (await action.get_property("innerText")).json_value())
            for action in actions_elem
        ]
        reviews_elem = await product.query_selector(".reviews-summary")
        reviews = (
            await (await reviews_elem.get_property("innerText")).json_value()
            if reviews_elem
            else None
        )
        product_details.append(
            {
                "name": name,
                "price": price,
                "url": url,
                "actions": actions,
                "reviews": reviews,
            }
        )
    return product_details


async def get_subcategory_item_counts(page):
    """
    [Function description]
    Retrieves item counts for each subcategory within the "Beauty & Personal Care" section.

    This function automates the extraction of subcategory item counts from the current page
    under the "Beauty & Personal Care" section. It gathers information about available subcategories,
    including:

    - Subcategory name
    - Number of items in that subcategory

    [Usage preconditions]
    - This API extracts subcategory item counts from the "Beauty & Personal Care" section **you are currently at**.
    - **You must already be on the Beauty & Personal Care category page before calling this function.**

    Args:
    page :  A Playwright `Page` instance that controls browser automation.


    Returns:
    list of dict
        A list of dictionaries where each dictionary contains the following keys:
        - "subcategory" (str): The name of the subcategory.
        - "item_count" (int): The count of items in that subcategory.
    """
    await page.goto("/beauty-personal-care.html")
    item_list_elements = await page.query_selector_all('a:has-text("item )")')
    subcategory_counts = []
    for element in item_list_elements:
        full_text = await element.inner_text()
        subcategory, count_str = full_text.rsplit("(", 1)
        count = int(count_str.split(" ")[0])
        subcategory_counts.append(
            {"subcategory": subcategory.strip(), "item_count": count}
        )
    return subcategory_counts


async def compile_product_lists_by_price_range(page):
    """
    [Function description]
    Compiles lists of products categorized under each predefined price range listed on the 'Beauty & Personal Care' page.

    This function navigates through the price ranges section and gathers information about each product categorized under those ranges.
    It collects data including:
    - Product title
    - Product URL

    [Usage preconditions]
    - You must already be on the 'Beauty & Personal Care' page before calling this function.

    Args:
    page :  A Playwright `Page` instance that controls browser automation.

    Returns:
    dict
        A dictionary where the keys are price ranges and the values are lists of products under those price ranges,
        with each product represented as a dictionary containing:
        - "title" (str): The title of the product.
        - "url" (str): The URL of the product.
    """
    await page.goto("/beauty-personal-care.html")
    price_ranges_selector = 'section.definition > a[href*="beauty-personal-care.html?"]'
    product_selector = 'link[href*="-html"]'
    price_ranges_elements = await page.query_selector_all(price_ranges_selector)
    price_ranges = {}
    for price_range_element in price_ranges_elements:
        price_range_text = await price_range_element.inner_text()
        price_range_url = await price_range_element.get_attribute("href")
        await page.goto(price_range_url)
        products = []
        product_elements = await page.query_selector_all(product_selector)
        for product_element in product_elements:
            product_title = await product_element.inner_text()
            product_url = await product_element.get_attribute("href")
            products.append({"title": product_title, "url": product_url})
        price_ranges[price_range_text] = products
    return price_ranges


async def extract_home_kitchen_products(page):
    """
    [Function description]
    Extracts detailed information about all products listed in the 'Home & Kitchen' category.

    This function automates the process of extracting product information from a webpage
    presenting products in the 'Home & Kitchen' category. It collects the following details
    for each product:

    - Product name
    - Product price
    - Product URL

    [Usage preconditions]
    - The page must be on the 'Home & Kitchen' category section where products are
      listed before calling this function.

    Args:
    page :  A Playwright `Page` instance that controls browser automation.

    Returns:
    list of dict
        A list of dictionaries where each dictionary contains the following keys:
        - "name" (str): The name of the product.
        - "price" (str): The price of the product.
        - "url" (str): The URL to the product page.
    """
    await page.goto("/home-kitchen.html")
    product_elements = await page.query_selector_all(".product-item")
    products = []
    for element in product_elements:
        name_elem = await element.query_selector(".product-item-link")
        name = await name_elem.inner_text() if name_elem else None
        price_elem = await element.query_selector(".price")
        price = await price_elem.inner_text() if price_elem else None
        url = await name_elem.get_attribute("href") if name_elem else None
        products.append({"name": name, "price": price, "url": url})
    return products


async def retrieve_home_kitchen_subcategories(page):
    """
    [Function description]
    Retrieves category names and corresponding product counts within the 'Home & Kitchen' section.

    This function gathers and extracts information from the 'Home & Kitchen' section, specifically:
    - Category names
    - Number of products available under each category

    [Usage preconditions]
    - You must already be on the 'Home & Kitchen' section page of the website.

    Args:
    page : A Playwright `Page` instance that controls browser automation.

    Returns:
    list of dict
        A list of dictionaries where each dictionary contains:
        - "category" (str): The name of the subcategory.
        - "product_count" (int): The number of products in the subcategory.
    """
    await page.goto("/home-kitchen.html")
    subcategories = []
    definition_tags = await page.query_selector_all("main definition")
    for definition in definition_tags:
        link = await definition.query_selector("link")
        text = await link.inner_text()
        category_name = text.split("(")[0].strip()
        product_count_text = text.split("(")[1].split(" item ")[0].strip()
        product_count = int(product_count_text)
        subcategories.append(
            {"category": category_name, "product_count": product_count}
        )
    return subcategories


async def extract_comparable_products_information(page):
    """
    [Function description]
    Extracts information about products that are marked for comparison in the Home & Kitchen section.

    This function automates the gathering of product details specifically for items marked "Add to Compare" and
    compiles their details.
    Extracted information includes product name, image URL, and their unique comparison link.

    [Usage preconditions]
    - You must be on the "Home & Kitchen" product listing page.
    - This function assumes the presence of product information with comparison functionality.

    Args:
    page :  A Playwright `Page` instance that controls browser automation.


    Returns:
    list of dict
        A list of dictionaries where each dictionary contains:
        - "name" (str): The product name.
        - "image_url" (str): The URL of the product image.
        - "compare_link" (str): The URL link for product comparison.
    """
    await page.goto("/home-kitchen.html")
    compare_products = []
    products = await page.query_selector_all('button:text("Add to Compare")')
    for product in products:
        name_element = await (
            await product.query_selector_xpath("following-sibling::a[@href]")
        ).text_content()
        image_element = await (
            await product.query_selector_xpath("preceding-sibling::img")
        ).get_attribute("src")
        compare_link_element = await (
            await product.query_selector_xpath("parent::div")
        ).get_attribute("data-product-url")
        compare_products.append(
            {
                "name": name_element.strip(),
                "image_url": image_element,
                "compare_link": compare_link_element,
            }
        )
    return compare_products


async def extract_wishlist_product_details(page):
    """
    [Function description]
    Extract detailed product information from the wish list including names, prices, URLs, and review counts/URLs.

    This function automates the extraction of product details from the current page of a user's wish list.
    It gathers comprehensive information about each product, including:

    - Product Name
    - Product Price
    - Product URL
    - Review Count
    - Review URL

    [Usage preconditions]
    - **You must already be on a wish list page before calling this function.**

    Args:
    page : A Playwright `Page` instance that controls browser automation.

    Returns:
    list of dict
        A list of dictionaries where each dictionary contains:
        - "name" (str): The product name.
        - "price" (str): The product price.
        - "url" (str): The product URL.
        - "review_count" (str): The number of reviews.
        - "review_url" (str): The URL for the product's reviews section.
    """
    await page.goto("/wishlist/")
    product_details = []
    product_name_elements = await page.query_selector_all("main > a:nth-child(2)")
    review_elements = await page.query_selector_all("main > a:nth-child(3)")
    for name_element, review_element in zip(product_name_elements, review_elements):
        product_name = await name_element.inner_text()
        product_url = await name_element.get_attribute("href")
        review_count = await review_element.inner_text()
        review_url = await review_element.get_attribute("href")
        price_element = name_element.parent_element.query_selector(".price")
        product_price = (
            await price_element.inner_text() if price_element else "Price Not Available"
        )
        product_details.append(
            {
                "name": product_name,
                "price": product_price,
                "url": product_url,
                "review_count": review_count,
                "review_url": review_url,
            }
        )
    return product_details


async def extract_product_comparison_data(page):
    """
    Automate the extraction of product comparison data from a webpage.

    This function gathers data about products available for comparison on the current page.
    It extracts details such as product names, URLs, and specifications if available.

    Usage preconditions:
    - This API should be called when already on a page listing products available for comparison.

    Args:
    page : A Playwright `Page` instance that controls browser automation.

    Returns:
    list of dict
        A list of dictionaries where each dictionary contains:
        - "name" (str): The name of the product.
        - "url" (str): The URL to the product's detailed page.
    """
    await page.goto("/wishlist/")
    products = []
    items_handle = await page.query_selector_all("main a[href*='/product_id']")
    for item in items_handle:
        product_name = await (await item.get_property("textContent")).json_value()
        product_url = await (await item.get_property("href")).json_value()
        products.append({"name": product_name.strip(), "url": product_url})
    return products
